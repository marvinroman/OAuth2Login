<?php namespace ProcessWire;


class Oauth2Login extends WireData implements Module, ConfigurableModule {

    const minVersion = "3.0.0";

    protected $data;
    public static $_data;
    protected static $configFile;
    protected static $validConfigKeys = array(
        'className',
        'packageName',
        'keysUrl',
        'options'
    );
    protected $backendUrl;
    protected $provider;
    protected $providerParams;


    public static function getModuleInfo()
    {
        return [
            'title' => 'OAuth2Login',
            'version' => "0.0.4",
            'summary' => 'OAuth2 login for ProcessWire.',
            'author' => 'flydev',
            'href' => 'https://modules.processwire.com/modules/oauth2-login/',
            'singular' => true,
            'autoload' => false,
            'icon' => 'plug'
        ];
    }

    protected function save() {
        $this->modules->saveModuleConfigData($this, $this->data);
    }

    protected static function getDefaultData()
    {
        return array(
            'providers_config'  => ''
        );
    }

    public function ___install() {

        if(version_compare($this->config->version, self::minVersion, '<'))
            throw new WireException("This module requires ProcessWire " . self::minVersion . " or newer.");

        $this->save();
    }

    public function __construct() {

        $this->provider = null;

        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }

        parent::__construct();
    }

    public function init() {

        self::$_data = $this;
        //$this->config->styles->add($this->config->urls->Oauth2Login . 'Oauth2Login.css');
        //$this->config->scripts->add($this->config->urls->Oauth2Login . 'Oauth2Login.js');

        $this->backendUrl = $this->config->urls->httpAdmin;

        $this->processLogin();
    }

    public function getCode($providerName) {

        $input = wire('input');
        $user = wire('user');
        $session = wire('session');

        $token = null;

        if (isset($input->post->{$providerName}) && !$user->isLoggedin()) {

            try {
                $session->CSRF->validate();
            } catch (WireCSRFException $e) {
                $this->log('SessionToken is invalid, possible CSRF attack in progress');
            }

            if (empty($input->get->code)) {
                $authUrl = $this->provider->getAuthorizationUrl($this->providerParams);
                $session->set('oauth2state', $this->provider->getState());
                $session->set('provider', $providerName);
                $session->redirect($authUrl);
            } elseif (empty($input->get->state) || $input->get->state !== $session->get('oauth2state')) {
                $this->log('State is invalid, possible CSRF attack in progress');
                $session->remove('oauth2state');
                $session->remove('provider');
                $session->logout();
            }
        }
        elseif (!$user->isLoggedin() && !empty($input->get->code) && !empty($session->get('oauth2state'))) {

            $token = $this->provider->getAccessToken('authorization_code', [
                'code' => $input->get->code
            ]);
        }

        return $token;
    }

    protected function ___processLogin() {

        $session = wire('session');

        $providerName = $this->getProviderName();
        if(!$this->setProvider($providerName)) return false;

        $token = $this->getCode($providerName);

        if(is_null($token)) return false;

        try {
            $ownerDetails = $this->provider->getResourceOwner($token);

            if(method_exists($ownerDetails, 'getLastName') || method_exists($ownerDetails, 'getFirstName')) {
                $username = !empty($ownerDetails->getLastName()) ? $ownerDetails->getLastName() : '';
                $username = !empty($username) && !empty($ownerDetails->getFirstName()) ? $username . '-' : '';
                $username = !empty($ownerDetails->getFirstName()) ? $username . $ownerDetails->getFirstName() : $username;
            }
            elseif(method_exists($ownerDetails, 'getName')) {
                $ownerDetails = $this->provider->getResourceOwner($token);
                $username = $ownerDetails->getName();
            }
            $emails = null;
            if(method_exists($ownerDetails, 'getEmail')) {
                $emails = array($ownerDetails->getEmail());
            }
            if(method_exists($ownerDetails, 'getEmails')) {
                // need to fix that
                $this->provider->domain = 'https://github.com:emails';
                $ownerDetails = $this->provider->getResourceOwner($token);
                $emails = $ownerDetails->getEmails();
            }

            if($this->checkUsername($username, $emails)) {
                $loginUser = $session->forceLogin($username);
                if ($loginUser && $loginUser->id) {
                    $this->log("Used {$providerName} to login for user: $loginUser->name");
                    $session->set('forceLogin', true);
                    if(!empty($session->getFor($this, 'success_uri')))
                        $session->redirect($session->getFor($this, 'success_uri'));
                }
            }
        } catch (\Exception $e) {
            $this->log('Something went wrong: ' . $e->getMessage());
            //$session->redirect($config->urls->admin);
            throw new WireException(__("Something went wrong: Please advise the administrator"));
        }
    }

    /*
     *  replace the last occurence of $search by $replace in $subject
     */
    protected function str_lreplace($search, $replace, $subject) {

        return preg_replace('~(.*)' . preg_quote($search, '~') . '~', '$1' . $replace, $subject, 1);
    }

    public function ___hookBackend() {
        $this->addHookAfter('Page::render', function(HookEvent $event) {
            $template = $event->object->template;

            if ($template == 'admin' && !wire('user')->isLoggedin()) {
                $this->setRedirectUri($this->backendUrl);
                $this->setRedirectSuccessUri($this->backendUrl);
                $form = $this->render();
                $event->return = $this->replaceForm($event->return, '</form>', $form);
            }
        });
    }

    protected function replaceForm($event_ret, $start_html, $form) {

        $ret = ($form instanceof InputfieldForm) ? $form->render() : $form;
        $html = $this->str_lreplace($start_html, '</form>' . $ret, $event_ret);

        return $html;
    }

    protected function getForm($formid) {

        $modules = wire('modules');

        $form = $modules->get("InputfieldForm");
        $form->action = './';
        $form->method = 'post';
        $form->attr('id+name', $formid);

        return $form;
    }

    /*
     *  render a login form
     */
    public function render($options = array()) {

        $modules = wire('modules');
        $defaultOptions = array(
            'formClass' => '',
            'buttonClass' => '',
            'buttonValue' => '',
            'prependMarkup' => '',
            'appendMarkup' => ''
        );
        $options = array_merge($defaultOptions, $options);
        $form = $this->getForm('socialsLoginForm');
        $form->prependMarkup = $options['prependMarkup'];
        $form->appendMarkup = $options['prependMarkup'];
        $out = '';
        foreach ($this->data as $key => $val) {
            if(strstr($key, 'provider_') && $val === 1) {
                $provider = str_replace('provider_', '', $key);
                $provider = ucfirst($provider);
                if(class_exists('\League\OAuth2\Client\Provider\\' . $provider)) {
                    $field = $modules->get("InputfieldSubmit");
                    if(strstr($options['buttonValue'], '{provider}')) {
                        $field->value = str_replace('{provider}', $provider, $options['buttonValue']);
                    }
                    else {
                        $field->value = empty($options['buttonValue']) ? __("Login with ") . $provider : $options['buttonValue'];
                    }
                    //$field->icon = "{$provider}";
                    $field->attr('id+name', strtolower("provider_{$provider}"));
                    if(!empty($options['buttonClass'])) $field->attr('class', $options['buttonClass']);
                    $form->append($field);
                }
            }
        }

        $out .= $form->render();

        return $out;
    }

    /*
     * return true if the user exist.
     */
    protected function checkUsername($username, array $emails) {
        // disable DoS
        if(count($emails) > 10) return false;

        $username = wire('sanitizer')->pageName($username);

        foreach ($emails as $email) {
            $email = wire('sanitizer')->email($email);
            $q = "email=$email, name=$username";
            if(wire('users')->get("{$q}")->id) {
                //bd("logged with user: $username, email: $email");
                return true;
            }
        }

        return false;
    }

    protected function getProviderName() {
        $providerName = null;

        foreach (wire('input')->post as $item => $value) {
            if($r = strstr($item, 'provider_')) {
                $providerName = $r;
            }
        }

        if(is_null($providerName)) {
            $providerName = wire('session')->get('providerName');
        }

        return $providerName;
    }

    protected function setProvider($providerName, $options = array()) {

        if(is_null($providerName)) {
            return false;
        }

        $redirectUri = empty(wire('session')->getFor($this, 'redirect_uri')) ? $this->backendUrl : wire('session')->getFor($this, 'redirect_uri');
        $subclass = ucfirst(str_replace('provider_', '', $providerName));
        $class = '\League\OAuth2\Client\Provider\\' . $subclass;
        $subclass = strtolower($subclass);
        $varClientId = $subclass . '_clientid';
        $varSecret = $subclass . '_secret';

        if(!isset($this->data[$varClientId]) || !isset($this->data[$varSecret]))
            return false;

        $params = array(
            'clientId'      => $this->data[$varClientId],
            'clientSecret'  => $this->data[$varSecret],
            'redirectUri'   => $redirectUri
        );
        $params = array_merge($params, $options);
        foreach ($this->data as $key => $value) {
            $r = strstr($key, 'provider_options_' . $subclass);
            if(!empty($r)) {
                $newOption = str_replace('provider_options_' . $subclass . '_', '', $key);
                $params = array_merge($params, array($newOption => $value));
            }
        }
        $this->providerParams = $params;
        if(!self::checkProviderClass($class)) {
            return false;
        }
        $this->provider = new $class($params);
        wire('session')->set('providerName', $providerName);

        return (is_null($this->provider)) ? false : true;
    }

    protected static function checkProviderClass($class) {

        return class_exists($class);
    }

    public function setRedirectUri($uri) {
        wire('session')->setFor($this, 'redirect_uri', wire('sanitizer')->url($uri));
    }

    public function setRedirectSuccessUri($uri) {
        wire('session')->setFor($this, 'success_uri', wire('sanitizer')->url($uri));
    }

    public function config($options = array()) {

        $session = wire('session');
        $defaultOptions = array(
            'redirect_uri'  => $this->backendUrl,
            'success_uri'   => ''
        );
        $options = array_merge($defaultOptions, $options);

        foreach ($options as $k => $v) {
            $session->setFor($this, $k, $v);
        }
        return $this;
    }

    protected static function getProvidersJsonConfigAsArray() {

        $configArray = json_decode(self::$_data['providers_config'], true);
        if(empty($configArray)) return false;
        $fullarray = array();

        foreach ($configArray as $key) {
            foreach ($key as $k => $v) {
                $fullarray[$k] = $v;
            }
        }

        return $fullarray;
    }

    protected static function getProvidersConfig(array $providerConfig) {

        $fullarray = array();

        foreach ($providerConfig as $k => $v) {
            $fullarray[$k] = $v;
        }

        return $fullarray;
    }

    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);
        $modules = wire('modules');
        $skip = false;
        $disabled = 'disabled';

        $fields = new InputfieldWrapper();

        $field = $modules->get("InputfieldTextarea");
        $field->label = __('JSON Providers Config ');
        $field->description = __("When adding a new provider, required config keys are: **className**, **packageName**, **helpUrl**, **options** (optional)");
        $field->attr('name+id', 'providers_config');
        $field->attr('value', $data['providers_config']);
        $fields->append($field);

        // get all the providers config
        $providersArray = self::getProvidersJsonConfigAsArray();
        if(empty($providersArray)) {
            return $fields;
        }

        $fs = $modules->get("InputfieldFieldset");
        $fs->label = __("Providers");
        $fs->icon = 'cogs';
        $fs->description = __("Choose one or more of the following third-party login provider.");
        $fs->collapsed = false;
        foreach ($providersArray as $provider => $providerConf) {
            // get a provider configuration
            $data_key = '';
            $conf = self::getProvidersConfig($providerConf);

            $field = $modules->get("InputfieldCheckbox");
            if(!self::checkProviderClass('\League\OAuth2\Client\Provider\\' . ucfirst($provider))) {
                $skip = true;
            }
            $description = ($skip == false) ? $disabled = '' : __("The required package is not installed. Please run the following command to install this provider: **composer require {$conf['packageName']}**");
            $field->label = ucfirst($provider);
            $field->description = __($description);
            $field->attr('name+id', "provider_" . strtolower($conf['className']));
            if (!$skip) {
                $data_key = isset($data["provider_" . strtolower($conf['className'])]) ? $data["provider_" . strtolower($conf['className'])] : '';
                $field->attr('checked', ($data_key == '1' && empty($disabled)) ? 'checked' : '');
                //$field->attr('checked', ($data["provider_" . strtolower($conf['className'])] == '1' && empty($disabled)) ? 'checked' : '');
                //$field->attr('data-icon', (empty($conf['image'])) ? '' : $config->urls->Oauth2Login . 'assets/' . $conf['image']);
            }
            $field->attr('disabled', $disabled);
            $fs->append($field);
            $fs_set = $modules->get("InputfieldFieldset");
            $fs_set->label = ucfirst($conf['className']) . __(" Settings");
            $fs_set->icon = strtolower($conf['className']);
            $fs_set->collapsed = true;
            $fs_set->showIf = "provider_" . strtolower($conf['className']) . "=1";

            $field = $modules->get("InputfieldText");
            $field->label = ucfirst($conf['className']) . __(" ClientID");
            $field->description = __("Can be obtained [here]({$conf['helpUrl']}).");
            $field->attr('name+id', strtolower(strtolower($conf['className']) . '_clientid'));
            $data_key = isset($data[strtolower($conf['className']) . "_clientid"]) ? $data[strtolower($conf['className']) . "_clientid"] : '';
            $field->attr('value', $data_key);
            $field->columnWidth = 50;
            $fs_set->append($field);

            $field = $modules->get("InputfieldText");
            $field->label = __("Client Secret");
            $field->description = __("Client Secret for your website.");
            $field->attr('name+id', strtolower($conf['className'] . "_secret"));
            $data_key = isset($data[strtolower($conf['className']) . "_secret"]) ? $data[strtolower($conf['className']) . "_secret"] : '';
            $field->attr('value', $data_key);
            $field->columnWidth = 50;
            $fs_set->append($field);

            if(isset($conf['options'])) {
                foreach ($conf['options'] as $key => $value) {
                    $field = $modules->get("InputfieldHidden");
                    $field->attr('name+id', 'provider_options_' . strtolower($provider) . '_' . $key);
                    $field->attr('value', $value);
                    $fs_set->append($field);
                }
            }

            $fs->append($fs_set);
            $disabled = true;
            $skip = false;
        }
        $fields->append($fs);

        return $fields;
    }

}



